package org.biclas.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.util.List;
import java.util.Map;

import javax.xml.ws.BindingProvider;

import org.biclas.ws.AlreadyHasBina_Exception;
import org.biclas.ws.BadInit_Exception;
import org.biclas.ws.BiclasPortType;
import org.biclas.ws.BiclasService;
import org.biclas.ws.CoordinatesView;
import org.biclas.ws.EmailExists_Exception;
import org.biclas.ws.FullStation_Exception;
import org.biclas.ws.InvalidEmail_Exception;
import org.biclas.ws.InvalidStation_Exception;
import org.biclas.ws.NoBinaAvail_Exception;
import org.biclas.ws.NoBinaRented_Exception;
import org.biclas.ws.NoCredit_Exception;
import org.biclas.ws.StationView;
import org.biclas.ws.UserNotExists_Exception;
import org.biclas.ws.UserView;

import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;


/**
 * Client.
 *
 * Adds easier endpoint address configuration and
 * UDDI lookup capability to the PortType generated by wsimport.
 */
public class BiclasClient implements BiclasPortType {

    /** WS service */
    BiclasService service = null;

    /** WS port (port type is the interface, port is the implementation) */
    BiclasPortType port = null;

    /** UDDI server URL */
    private String uddiURL = null;

    /** WS name */
    private String wsName = null;

    /** WS endpoint address */
    private String wsURL = null; // default value is defined inside WSDL

    public String getWsURL() {
        return wsURL;
    }

    /** output option **/
    private boolean verbose = false;

    public boolean isVerbose() {
        return verbose;
    }

    public void setVerbose(boolean verbose) {
        this.verbose = verbose;
    }

    /** constructor with provided web service URL */
    public BiclasClient(String wsURL) throws BiclasClientException {
        this.wsURL = wsURL;
        createStub();
    }

    /** constructor with provided UDDI location and name */
    public BiclasClient(String uddiURL, String wsName) throws BiclasClientException {
        this.uddiURL = uddiURL;
        this.wsName = wsName;
        uddiLookup();
        createStub();
    }

    /** UDDI lookup */
    private void uddiLookup() throws BiclasClientException {
        try {
            if (verbose)
                System.out.printf("Contacting UDDI at %s%n", uddiURL);
            UDDINaming uddiNaming = new UDDINaming(uddiURL);

            if (verbose)
                System.out.printf("Looking for '%s'%n", wsName);
            wsURL = uddiNaming.lookup(wsName);

        } catch (Exception e) {
            String msg = String.format("Client failed lookup on UDDI at %s!",
                    uddiURL);
            throw new BiclasClientException(msg, e);
        }

        if (wsURL == null) {
            String msg = String.format(
                    "Service with name %s not found on UDDI at %s", wsName,
                    uddiURL);
            throw new BiclasClientException(msg);
        }
    }

    /** Stub creation and configuration */
    private void createStub() {
        if (verbose)
            System.out.println("Creating stub ...");
        service = new BiclasService();
        port = service.getBiclasPort();

        if (wsURL != null) {
            if (verbose)
                System.out.println("Setting endpoint address ...");
            BindingProvider bindingProvider = (BindingProvider) port;
            Map<String, Object> requestContext = bindingProvider
                    .getRequestContext();
            requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
        }
    }

	@Override
	public UserView activateUser(String email) throws EmailExists_Exception, InvalidEmail_Exception {
		return port.activateUser(email);
	}

	@Override
	public StationView getInfoStation(String stationId) throws InvalidStation_Exception {
		return port.getInfoStation(stationId);
	}

	@Override
	public List<StationView> listStations(Integer numberOfStations, CoordinatesView coordinates) {
		return port.listStations(numberOfStations,coordinates);
	}

	@Override
	public void rentBina(String stationId, String email) throws AlreadyHasBina_Exception, InvalidStation_Exception,
			NoBinaAvail_Exception, NoCredit_Exception, UserNotExists_Exception {
		port.rentBina(stationId,email);
	}

	@Override
	public void returnBina(String stationId, String email)
			throws FullStation_Exception, InvalidStation_Exception, NoBinaRented_Exception, UserNotExists_Exception {
		port.returnBina(stationId,email);
	}

	@Override
	public int getCredit(String email) throws UserNotExists_Exception {
		return port.getCredit(email);
	}

	@Override
	public String testPing(String inputMessage) {
		return port.testPing(inputMessage);
	}

	@Override
	public void testClear() {
		port.testClear();
	}

	@Override
	public void testInitStation(String stationId, int x, int y, int capacity, int returnPrize)
			throws BadInit_Exception {
		port.testInitStation(stationId, x, y, capacity, returnPrize);
	}

	@Override
	public void testInit(int userInitialPoints) throws BadInit_Exception {
		port.testInit(userInitialPoints);
	}
}